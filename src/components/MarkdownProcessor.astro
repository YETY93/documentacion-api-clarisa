---
// src/components/MarkdownProcessor.astro
import EnhancedJsonViewer from "./EnhancedJsonViewer.astro";
import JsonSummary from "./JsonSummary.astro";
import { marked } from "marked";

export interface Props {
    content: string;
}

const { content } = Astro.props;

// Configurar marked para mejor renderizado
marked.setOptions({
    breaks: true,
    gfm: true,
});

// Función para procesar el markdown y extraer bloques JSON
function processMarkdownContent(markdownContent: string) {
    const parts = [];
    let currentIndex = 0;

    // Regex para encontrar bloques de código JSON
    const jsonBlockRegex = /```json\n([\s\S]*?)\n```/g;
    let match;

    while ((match = jsonBlockRegex.exec(markdownContent)) !== null) {
        // Agregar contenido antes del bloque JSON
        if (match.index > currentIndex) {
            const beforeContent = markdownContent.slice(
                currentIndex,
                match.index,
            );
            if (beforeContent.trim()) {
                parts.push({
                    type: "markdown",
                    content: marked.parse(beforeContent) as string,
                });
            }
        }

        // Agregar el bloque JSON
        const jsonContent = match[1];

        // Obtener contexto más amplio para mejor detección
        const beforeContext = markdownContent.slice(
            Math.max(0, match.index - 300),
            match.index,
        );
        const afterContext = markdownContent.slice(
            match.index + match[0].length,
            Math.min(
                markdownContent.length,
                match.index + match[0].length + 200,
            ),
        );
        const fullContext = beforeContext + afterContext;

        // Detectar si es un ejemplo mínimo
        const isMinimalExample =
            beforeContext.includes("datos mínimos") ||
            beforeContext.includes("ejemplo anterior corresponde") ||
            beforeContext.includes("petición con los datos mínimos") ||
            afterContext.includes("datos mínimos");

        // Determinar el título basado en el contexto
        let title = "JSON";
        if (
            beforeContext.includes("Formato de la petición") ||
            beforeContext.includes("peticiócn")
        ) {
            title = "Formato de Petición";
        } else if (beforeContext.includes("múltiples impuestos")) {
            title = "Múltiples Impuestos";
        } else if (beforeContext.includes("descuento a un ítem")) {
            title = "Descuento por Ítem";
        } else if (beforeContext.includes("descuento general")) {
            title = "Descuento General";
        } else if (beforeContext.includes("Propiedades Adicionales")) {
            title = "Ejemplo Adicional";
        }

        parts.push({
            type: "json",
            content: jsonContent,
            title: title,
            isMinimalExample: isMinimalExample,
            context: fullContext,
        });

        currentIndex = match.index + match[0].length;
    }

    // Agregar contenido restante
    if (currentIndex < markdownContent.length) {
        const remainingContent = markdownContent.slice(currentIndex);
        if (remainingContent.trim()) {
            parts.push({
                type: "markdown",
                content: marked.parse(remainingContent) as string,
            });
        }
    }

    return parts;
}

const processedParts = processMarkdownContent(content);
---

<div class="markdown-processor">
    <!-- Mostrar resumen de JSONs si hay más de uno -->
    <JsonSummary content={content} />

    {
        processedParts.map((part, index) => {
            if (part.type === "json") {
                return (
                    <EnhancedJsonViewer
                        code={part.content}
                        title={part.title}
                        isMinimalExample={part.isMinimalExample}
                        context={part.context}
                        showCopyButton={true}
                    />
                );
            } else {
                // Para contenido markdown, renderizamos como HTML
                return (
                    <div
                        class="markdown-content prose prose-gray dark:prose-invert max-w-none"
                        set:html={part.content}
                    />
                );
            }
        })
    }
</div>

<style>
    .markdown-content {
        /* Estilos adicionales para el contenido markdown */
    }

    .markdown-content :global(h1) {
        @apply text-3xl font-bold text-gray-900 dark:text-white mb-6 mt-8;
    }

    .markdown-content :global(h2) {
        @apply text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4 mt-6;
    }

    .markdown-content :global(h3) {
        @apply text-xl font-medium text-gray-700 dark:text-gray-200 mb-3 mt-5;
    }

    .markdown-content :global(p) {
        @apply text-gray-600 dark:text-gray-300 mb-4 leading-relaxed;
    }

    .markdown-content :global(blockquote) {
        @apply border-l-4 border-blue-500 pl-4 py-2 bg-blue-50 dark:bg-blue-900/20 text-blue-800 dark:text-blue-200 mb-4;
    }

    .markdown-content :global(blockquote > blockquote) {
        @apply border-l-4 border-yellow-500 pl-4 py-1 bg-yellow-50 dark:bg-yellow-900/20 text-yellow-800 dark:text-yellow-200 mt-2;
    }

    .markdown-content :global(table) {
        @apply w-full border-collapse border border-gray-300 dark:border-gray-600 mb-6;
    }

    .markdown-content :global(th) {
        @apply bg-gray-100 dark:bg-gray-800 border border-gray-300 dark:border-gray-600 px-4 py-2 text-left font-semibold text-gray-900 dark:text-gray-100;
    }

    .markdown-content :global(td) {
        @apply border border-gray-300 dark:border-gray-600 px-4 py-2 text-gray-700 dark:text-gray-300;
    }

    .markdown-content :global(code) {
        @apply bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-sm font-mono text-gray-800 dark:text-gray-200;
    }

    .markdown-content :global(ul) {
        @apply list-disc list-inside mb-4 text-gray-600 dark:text-gray-300;
    }

    .markdown-content :global(ol) {
        @apply list-decimal list-inside mb-4 text-gray-600 dark:text-gray-300;
    }

    .markdown-content :global(li) {
        @apply mb-2;
    }
</style>
