---
// src/components/Breadcrumbs.astro
interface Props {
  category?: string;
  title?: string;
}

const { category, title } = Astro.props;
const { pathname } = Astro.url;

// Generar breadcrumbs basado en la URL
const pathSegments = pathname.split('/').filter(Boolean);
const breadcrumbs = [
  { name: 'Inicio', href: '/' }
];

if (category) {
  breadcrumbs.push({
    name: category.charAt(0).toUpperCase() + category.slice(1),
    href: `/${category}`
  });
}

if (title) {
  breadcrumbs.push({
    name: title,
    href: pathname
  });
}
---

<nav class="flex mb-6" aria-label="Breadcrumb">
  <ol class="inline-flex items-center space-x-1 md:space-x-3">
    {breadcrumbs.map((crumb, index) => (
      <li class="inline-flex items-center">
        {index > 0 && (
          <svg class="w-4 h-4 text-gray-400 mx-1" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
          </svg>
        )}
        {index === breadcrumbs.length - 1 ? (
          <span class="text-sm font-medium text-gray-500 dark:text-gray-400">
            {crumb.name}
          </span>
        ) : (
          <a 
            href={crumb.href} 
            class="text-sm font-medium text-clarisa-600 hover:text-clarisa-800 dark:text-clarisa-400 dark:hover:text-clarisa-300 transition-colors"
          >
            {crumb.name}
          </a>
        )}
      </li>
    ))}
  </ol>
</nav>

<style>
  /* Animaci√≥n suave para los enlaces */
  nav a {
    transition: color 0.2s ease-in-out;
  }
  
  nav a:hover {
    text-decoration: underline;
    text-decoration-thickness: 2px;
    text-underline-offset: 2px;
  }
</style>