---
// src/components/JsonViewer.astro
export interface Props {
    code: string;
    title?: string;
    showCopyButton?: boolean;
    isMinimalExample?: boolean;
}

const {
    code,
    title = "JSON",
    showCopyButton = true,
    isMinimalExample = false,
} = Astro.props;

// Intentar parsear y formatear el JSON
let formattedJson = code;
let isValidJson = false;

try {
    const parsed = JSON.parse(code);
    formattedJson = JSON.stringify(parsed, null, 2);
    isValidJson = true;
} catch (e) {
    // Si no es JSON válido, usar el código tal como está
    formattedJson = code;
}

// Generar un ID único para este bloque
const uniqueId = `json-${Math.random().toString(36).substr(2, 9)}`;
---

<div
    class="json-viewer-container mb-6 border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden"
>
    <!-- Header con título y botón de copia -->
    <div
        class="flex items-center justify-between bg-gray-50 dark:bg-gray-800 px-4 py-3 border-b border-gray-200 dark:border-gray-700"
    >
        <div class="flex items-center space-x-2">
            <div class="w-3 h-3 bg-green-500 rounded-full"></div>
            <span class="text-sm font-medium text-gray-700 dark:text-gray-300">
                {title}
                {
                    isMinimalExample && (
                        <span class="ml-2 px-2 py-1 text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-full">
                            Datos mínimos
                        </span>
                    )
                }
            </span>
        </div>

        {
            showCopyButton && (
                <button
                    class="copy-json-btn flex items-center space-x-1 px-3 py-1 text-xs bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors"
                    data-target={uniqueId}
                    title="Copiar JSON"
                >
                    <svg
                        class="w-3 h-3"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"
                        />
                    </svg>
                    <span class="copy-text">Copiar</span>
                </button>
            )
        }
    </div>

    <!-- Contenido JSON -->
    <div class="relative">
        <pre
            class="bg-gray-50 dark:bg-gray-900 text-gray-800 dark:text-gray-200 p-4 overflow-x-auto text-sm leading-relaxed"><code id={uniqueId} class="json-code" set:html={formattedJson} /></pre>

        <!-- Indicador de JSON válido -->
        {
            isValidJson && (
                <div
                    class="absolute top-2 right-2 w-2 h-2 bg-green-500 rounded-full"
                    title="JSON válido"
                />
            )
        }
    </div>
</div>

<style>
    .json-code {
        font-family: "Fira Code", "Monaco", "Cascadia Code", "Roboto Mono",
            monospace;
        line-height: 1.6;
    }

    /* Syntax highlighting para JSON */
    .json-code {
        color: #374151; /* gray-700 */
    }

    :global(.dark) .json-code {
        color: #d1d5db; /* gray-300 */
    }

    /* Colores para diferentes elementos JSON */
    .json-code :global(.json-key) {
        color: #059669; /* emerald-600 */
        font-weight: 600;
    }

    :global(.dark) .json-code :global(.json-key) {
        color: #10b981; /* emerald-500 */
    }

    .json-code :global(.json-string) {
        color: #dc2626; /* red-600 */
    }

    :global(.dark) .json-code :global(.json-string) {
        color: #f87171; /* red-400 */
    }

    .json-code :global(.json-number) {
        color: #7c3aed; /* violet-600 */
    }

    :global(.dark) .json-code :global(.json-number) {
        color: #a78bfa; /* violet-400 */
    }

    .json-code :global(.json-boolean) {
        color: #ea580c; /* orange-600 */
        font-weight: 600;
    }

    :global(.dark) .json-code :global(.json-boolean) {
        color: #fb923c; /* orange-400 */
    }

    .json-code :global(.json-null) {
        color: #6b7280; /* gray-500 */
        font-style: italic;
    }

    :global(.dark) .json-code :global(.json-null) {
        color: #9ca3af; /* gray-400 */
    }
</style>

<script is:inline>
    // Función para aplicar syntax highlighting al JSON
    function highlightJson(jsonString) {
        return jsonString
            .replace(
                /("[\w\s]*")(\s*:\s*)/g,
                '<span class="json-key">$1</span>$2',
            )
            .replace(/:\s*(".*?")/g, ': <span class="json-string">$1</span>')
            .replace(
                /:\s*(\d+\.?\d*)/g,
                ': <span class="json-number">$1</span>',
            )
            .replace(
                /:\s*(true|false)/g,
                ': <span class="json-boolean">$1</span>',
            )
            .replace(/:\s*(null)/g, ': <span class="json-null">$1</span>');
    }

    // Inicializar cuando el DOM esté listo
    function initJsonViewers() {
        // Aplicar syntax highlighting a todos los bloques JSON
        document.querySelectorAll(".json-code").forEach((codeBlock) => {
            const content = codeBlock.textContent || "";
            try {
                // Verificar si es JSON válido y aplicar highlighting
                JSON.parse(content);
                codeBlock.innerHTML = highlightJson(content);
            } catch (e) {
                // Si no es JSON válido, mantener el contenido original
                codeBlock.textContent = content;
            }
        });

        // Configurar botones de copia
        document.querySelectorAll(".copy-json-btn").forEach((button) => {
            button.addEventListener("click", async (e) => {
                e.preventDefault();
                const targetId = button.getAttribute("data-target");
                const codeElement = document.getElementById(targetId);
                const copyText = button.querySelector(".copy-text");

                if (codeElement && copyText) {
                    try {
                        const text = codeElement.textContent || "";

                        if (navigator.clipboard) {
                            await navigator.clipboard.writeText(text);
                        } else {
                            // Fallback para navegadores sin clipboard API
                            const textArea = document.createElement("textarea");
                            textArea.value = text;
                            textArea.style.position = "fixed";
                            textArea.style.left = "-999999px";
                            document.body.appendChild(textArea);
                            textArea.select();
                            document.execCommand("copy");
                            document.body.removeChild(textArea);
                        }

                        // Feedback visual
                        const originalText = copyText.textContent;
                        copyText.textContent = "¡Copiado!";
                        button.classList.add(
                            "bg-green-50",
                            "dark:bg-green-900",
                            "border-green-300",
                            "dark:border-green-700",
                            "text-green-700",
                            "dark:text-green-300",
                        );

                        setTimeout(() => {
                            copyText.textContent = originalText;
                            button.classList.remove(
                                "bg-green-50",
                                "dark:bg-green-900",
                                "border-green-300",
                                "dark:border-green-700",
                                "text-green-700",
                                "dark:text-green-300",
                            );
                        }, 2000);
                    } catch (error) {
                        console.error("Error al copiar:", error);
                        copyText.textContent = "Error";
                        setTimeout(() => {
                            copyText.textContent = "Copiar";
                        }, 2000);
                    }
                }
            });
        });
    }

    // Inicializar cuando el DOM esté listo
    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", initJsonViewers);
    } else {
        initJsonViewers();
    }

    // Reinicializar en navegación del lado del cliente (Astro)
    document.addEventListener("astro:page-load", initJsonViewers);
</script>
