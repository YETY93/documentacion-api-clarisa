---
// src/components/CodePanel.astro
---

<div class="h-full bg-transparent">
  <!-- Header más compacto -->
  <div class="p-4 border-b border-gray-200/60 dark:border-slate-700/50">
    <h3 class="font-semibold text-gray-900 dark:text-slate-100 text-sm">Ejemplos de Código</h3>
    <p class="text-xs text-gray-600 dark:text-slate-300 mt-1">Prueba la API en diferentes lenguajes</p>
  </div>
  
  <!-- Tabs para diferentes lenguajes -->
  <div class="border-b border-gray-200/60 dark:border-slate-700/50">
    <nav class="flex px-4">
      <button class="tab-button flex items-center space-x-2 py-2 px-4 border-b-2 border-clarisa-500 font-medium text-sm text-clarisa-600 dark:text-clarisa-400 transition-colors" data-tab="curl">
        <span class="w-4 h-4 bg-green-500 rounded text-xs text-white flex items-center justify-center font-mono">$</span>
        <span>cURL</span>
      </button>
      <button class="tab-button flex items-center space-x-2 py-2 px-4 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300 transition-colors" data-tab="javascript">
        <span class="w-4 h-4 bg-yellow-500 rounded text-xs text-white flex items-center justify-center font-mono">JS</span>
        <span>JavaScript</span>
      </button>
      <button class="tab-button flex items-center space-x-2 py-2 px-4 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300 transition-colors" data-tab="python">
        <span class="w-4 h-4 bg-clarisa-500 rounded text-xs text-white flex items-center justify-center font-mono">PY</span>
        <span>Python</span>
      </button>
    </nav>
  </div>
  
  <!-- Contenido de las tabs -->
  <div class="p-4">
    <div id="curl" class="tab-content">
      <div class="mb-2 flex items-center justify-between">
        <span class="text-xs font-medium text-gray-500 dark:text-gray-400">Terminal</span>
        <button class="copy-btn text-xs text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300" data-target="curl-code">
          Copiar
        </button>
      </div>
      <pre class="bg-gray-900 dark:bg-gray-800 text-green-400 p-3 rounded text-sm overflow-x-auto border border-gray-700"><code id="curl-code">curl -X GET \
  'https://api.clarisa.com/v1/facturas' \
  -H 'Authorization: Bearer YOUR_TOKEN' \
  -H 'Content-Type: application-json' \
  -H 'Accept: application/json'</code></pre>
    </div>
    
    <div id="javascript" class="tab-content hidden">
      <div class="mb-2 flex items-center justify-between">
        <span class="text-xs font-medium text-gray-500 dark:text-gray-400">Node.js / Browser</span>
        <button class="copy-btn text-xs text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300" data-target="js-code">
          Copiar
        </button>
      </div>
      <pre class="bg-gray-900 dark:bg-gray-800 text-gray-300 p-3 rounded text-sm overflow-x-auto border border-gray-700"><code id="js-code" set:html={`// Usando fetch API
const response = await fetch('https://api.clarisa.com/v1/facturas', {
  method: 'GET',
  headers: {
    'Authorization': 'Bearer YOUR_TOKEN',
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  }
});

if (response.ok) {
  const data = await response.json();
  console.log('Facturas:', data);
} else {
  console.error('Error:', response.status);
}`}></code></pre>
    </div>
    
    <div id="python" class="tab-content hidden">
      <div class="mb-2 flex items-center justify-between">
        <span class="text-xs font-medium text-gray-500 dark:text-gray-400">Python 3.x</span>
        <button class="copy-btn text-xs text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300" data-target="python-code">
          Copiar
        </button>
      </div>
      <pre class="bg-gray-900 dark:bg-gray-800 text-gray-300 p-3 rounded text-sm overflow-x-auto border border-gray-700"><code id="python-code" set:html={`import requests
import json

# Configurar headers
headers = {
    'Authorization': 'Bearer YOUR_TOKEN',
    'Content-Type': 'application/json',
    'Accept': 'application/json'
}

# Realizar petición
response = requests.get(
    'https://api.clarisa.com/v1/facturas',
    headers=headers
)

if response.status_code == 200:
    data = response.json()
    print(f"Facturas encontradas: {len(data)}")
    print(json.dumps(data, indent=2))
else:
    print(f"Error: {response.status_code}")`}></code></pre>
    </div>
  </div>
  
  <!-- Respuesta de ejemplo -->
  <div class="border-t border-gray-200 dark:border-gray-800 p-4">
    <div class="mb-2">
      <span class="text-xs font-medium text-gray-500 dark:text-gray-400">Respuesta de ejemplo</span>
    </div>
    <pre class="bg-green-50 dark:bg-green-900/20 text-green-800 dark:text-green-300 p-3 rounded text-xs overflow-x-auto border border-green-200 dark:border-green-800"><code set:html={`{
  "status": "success",
  "data": [
    {
      "id": "fact_123",
      "numero": "F-2024-001",
      "fecha": "2024-01-15",
      "total": 1250.00,
      "cliente": "Empresa ABC"
    }
  ],
  "meta": {
    "total": 1,
    "page": 1
  }
}`}></code></pre>
  </div>
</div>

<script is:inline>
  // Evitar múltiples inicializaciones
  if (!window.codePanelInitialized) {
    window.codePanelInitialized = true;
    
    class CodePanelManager {
      constructor() {
        this.tabButtons = null;
        this.tabContents = null;
        this.copyButtons = null;
        this.initialized = false;
        this.init();
      }

      init() {
        // Si ya está inicializado, solo rebind los eventos
        if (this.initialized) {
          this.rebindEvents();
          return;
        }

        const initializeElements = () => {
          this.tabButtons = document.querySelectorAll('.tab-button');
          this.tabContents = document.querySelectorAll('.tab-content');
          this.copyButtons = document.querySelectorAll('.copy-btn');
          
          if (this.tabButtons.length > 0) {
            this.bindTabEvents();
            this.bindCopyEvents();
            this.initialized = true;
          }
        };

        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', initializeElements);
        } else {
          initializeElements();
        }
      }

      rebindEvents() {
        // Limpiar eventos anteriores y rebind
        setTimeout(() => {
          this.tabButtons = document.querySelectorAll('.tab-button');
          this.tabContents = document.querySelectorAll('.tab-content');
          this.copyButtons = document.querySelectorAll('.copy-btn');
          
          this.bindTabEvents();
          this.bindCopyEvents();
        }, 100);
      }

      bindTabEvents() {
        this.tabButtons?.forEach((button) => {
          // Remover listeners anteriores clonando el elemento
          const newButton = button.cloneNode(true);
          button.parentNode?.replaceChild(newButton, button);
          
          newButton.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            const targetTab = newButton.getAttribute('data-tab');
            if (!targetTab) return;
            
            this.updateActiveTab(newButton);
            this.showTabContent(targetTab);
          });
        });
        
        // Actualizar la referencia después del clonado
        this.tabButtons = document.querySelectorAll('.tab-button');
      }

      updateActiveTab(activeButton) {
        this.tabButtons?.forEach((btn) => {
          btn.classList.remove('border-clarisa-500', 'text-clarisa-600', 'dark:text-clarisa-400');
          btn.classList.add('border-transparent', 'text-gray-500', 'dark:text-gray-400');
        });
        
        activeButton.classList.remove('border-transparent', 'text-gray-500', 'dark:text-gray-400');
        activeButton.classList.add('border-clarisa-500', 'text-clarisa-600', 'dark:text-clarisa-400');
      }

      showTabContent(targetTab) {
        this.tabContents?.forEach((content) => {
          content.classList.add('hidden');
        });
        
        const targetContent = document.getElementById(targetTab);
        targetContent?.classList.remove('hidden');
      }

      bindCopyEvents() {
        this.copyButtons?.forEach((button) => {
          // Remover listeners anteriores clonando el elemento
          const newButton = button.cloneNode(true);
          button.parentNode?.replaceChild(newButton, button);
          
          newButton.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            const targetId = newButton.getAttribute('data-target');
            if (!targetId) return;
            
            const codeElement = document.getElementById(targetId);
            if (!codeElement) return;
            
            this.copyToClipboard(codeElement.textContent || '', newButton);
          });
        });
        
        // Actualizar la referencia después del clonado
        this.copyButtons = document.querySelectorAll('.copy-btn');
      }

      async copyToClipboard(text, button) {
        const originalText = button.textContent || '';
        
        try {
          if (navigator.clipboard) {
            await navigator.clipboard.writeText(text);
            this.showCopyFeedback(button, '¡Copiado!', originalText);
          } else {
            // Fallback para navegadores sin clipboard API
            this.fallbackCopyToClipboard(text);
            this.showCopyFeedback(button, '¡Copiado!', originalText);
          }
        } catch (error) {
          this.showCopyFeedback(button, 'Error', originalText);
        }
      }

      fallbackCopyToClipboard(text) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
          document.execCommand('copy');
        } catch (err) {
          console.error('Fallback: Oops, unable to copy', err);
        }
        
        document.body.removeChild(textArea);
      }

      showCopyFeedback(button, message, originalText) {
        button.textContent = message;
        setTimeout(() => {
          button.textContent = originalText;
        }, 2000);
      }
    }

    // Crear instancia global
    window.codePanelManager = new CodePanelManager();
    
    // Reinicializar cuando se abra el panel móvil
    document.addEventListener('codePanelOpened', () => {
      if (window.codePanelManager) {
        window.codePanelManager.rebindEvents();
      }
    });
  }
</script>